# Generated by ariadne-codegen on 2023-08-19 23:26
# Source: thesis_diseases_risk_factors/graph/queries.graphqls

from typing import List

from .article import Article
from .async_base_client import AsyncBaseClient
from .input_types import RiskFactorInput
from .list_classification_items import ListClassificationItems
from .list_diseases import ListDiseases
from .list_questions_answers_by_disease import ListQuestionsAnswersByDisease
from .search_articles import SearchArticles
from .statistics import Statistics
from .update_risk_factors import UpdateRiskFactors


def gql(q: str) -> str:
    return q


class Client(AsyncBaseClient):
    async def list_diseases(self) -> ListDiseases:
        query = gql(
            """
            query ListDiseases {
              diseases {
                id
                names
                dbLinks {
                  icd10
                  icd11
                  mesh
                }
                category
                description
              }
            }
            """
        )
        variables: dict[str, object] = {}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return ListDiseases.parse_obj(data)

    async def list_classification_items(self) -> ListClassificationItems:
        query = gql(
            """
            query ListClassificationItems {
              classificationItems {
                id
                label
                article {
                  id
                  text
                }
              }
            }
            """
        )
        variables: dict[str, object] = {}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return ListClassificationItems.parse_obj(data)

    async def list_questions_answers_by_disease(
        self, disease_id: str
    ) -> ListQuestionsAnswersByDisease:
        query = gql(
            """
            query ListQuestionsAnswersByDisease($diseaseId: ID!) {
              qas(diseaseId: $diseaseId) {
                id
                article {
                  id
                  text
                }
                questions {
                  id
                  text
                  answers {
                    answer_start
                    text
                  }
                }
              }
            }
            """
        )
        variables: dict[str, object] = {"diseaseId": disease_id}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return ListQuestionsAnswersByDisease.parse_obj(data)

    async def search_articles(self, term: str, limit: int) -> SearchArticles:
        query = gql(
            """
            query SearchArticles($term: String!, $limit: Int!) {
              searchArticles(term: $term, limit: $limit)
            }
            """
        )
        variables: dict[str, object] = {"term": term, "limit": limit}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return SearchArticles.parse_obj(data)

    async def update_risk_factors(
        self, disease_id: str, risk_factors: List[RiskFactorInput]
    ) -> UpdateRiskFactors:
        query = gql(
            """
            mutation UpdateRiskFactors($diseaseId: String!, $riskFactors: [RiskFactorInput!]!) {
              updateRiskFactors(input: {diseaseId: $diseaseId, riskFactors: $riskFactors}) {
                _stub
              }
            }
            """
        )
        variables: dict[str, object] = {
            "diseaseId": disease_id,
            "riskFactors": risk_factors,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return UpdateRiskFactors.parse_obj(data)

    async def article(self, id: str) -> Article:
        query = gql(
            """
            query Article($id: ID!) {
              article(id: $id) {
                text
              }
            }
            """
        )
        variables: dict[str, object] = {"id": id}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return Article.parse_obj(data)

    async def statistics(self) -> Statistics:
        query = gql(
            """
            query Statistics {
              statistics {
                diseaseCount
                articlesCount
                qasCount
                positiveClassificationItemsCount
                totalPositiveClassificationItemsCount
                negativeClassificationItemsCount
                qasShortestAnswerLength
                qasLongestAnswerLength
              }
            }
            """
        )
        variables: dict[str, object] = {}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return Statistics.parse_obj(data)
