package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"

	"github.com/maximrub/thesis-diseases-risk-factors-server/internal/generated"
	"github.com/maximrub/thesis-diseases-risk-factors-server/internal/graph/model"
)

// CreateClassificationItems is the resolver for the createClassificationItems field.
func (r *mutationResolver) CreateClassificationItems(ctx context.Context, input []*model.CreateClassificationItemInput) (*model.ClassificationItemPayload, error) {
	return r.DAL.CreateClassificationItems(ctx, input)
}

// CreateDisease is the resolver for the createDisease field.
func (r *mutationResolver) CreateDisease(ctx context.Context, input model.CreateDiseaseInput) (*model.DiseasePayload, error) {
	return r.DAL.CreateDisease(ctx, input)
}

// CreateQa is the resolver for the createQA field.
func (r *mutationResolver) CreateQa(ctx context.Context, input model.CreateQAInput) (*model.QAPayload, error) {
	return r.DAL.CreateQA(ctx, input)
}

// DeleteQa is the resolver for the deleteQA field.
func (r *mutationResolver) DeleteQa(ctx context.Context, input model.DeleteQAInput) (*model.DeleteQAPayload, error) {
	return r.DAL.DeleteQA(ctx, input)
}

// FetchDiseases is the resolver for the fetchDiseases field.
func (r *mutationResolver) FetchDiseases(ctx context.Context) (bool, error) {
	err := r.DAL.FetchDiseases(ctx)
	if err != nil {
		return false, err
	}

	return true, nil
}

// UpdateQa is the resolver for the updateQA field.
func (r *mutationResolver) UpdateQa(ctx context.Context, input model.UpdateQAInput) (*model.UpdateQAPayload, error) {
	return r.DAL.UpdateQA(ctx, input)
}

// UpdateRiskFactors is the resolver for the updateRiskFactors field.
func (r *mutationResolver) UpdateRiskFactors(ctx context.Context, input model.UpdateRiskFactorsInput) (*model.UpdateRiskFactorsPayload, error) {
	return r.DAL.UpdateRiskFactors(ctx, input)
}

// Article is the resolver for the article field.
func (r *queryResolver) Article(ctx context.Context, id string) (*model.Article, error) {
	return r.DAL.GetArticle(id)
}

// ClassificationItems is the resolver for the classificationItems field.
func (r *queryResolver) ClassificationItems(ctx context.Context) ([]*model.ClassificationItem, error) {
	return r.DAL.GetClassificationItems(ctx)
}

// Diseases is the resolver for the diseases field.
func (r *queryResolver) Diseases(ctx context.Context) ([]*model.Disease, error) {
	return r.DAL.GetDiseases(ctx)
}

// Qas is the resolver for the qas field.
func (r *queryResolver) Qas(ctx context.Context, diseaseID string) ([]*model.Qa, error) {
	return r.DAL.GetQAs(ctx, diseaseID)
}

// RiskFactors is the resolver for the riskFactors field.
func (r *queryResolver) RiskFactors(ctx context.Context, diseaseID string) (*model.RiskFactors, error) {
	return r.DAL.GetRiskFactors(ctx, diseaseID)
}

// SearchArticles is the resolver for the searchArticles field.
func (r *queryResolver) SearchArticles(ctx context.Context, term string, limit int) ([]string, error) {
	return r.DAL.SearchArticles(ctx, term, limit)
}

// Statistics is the resolver for the statistics field.
func (r *queryResolver) Statistics(ctx context.Context) (*model.Statistics, error) {
	return r.DAL.GetStatistics(ctx)
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
